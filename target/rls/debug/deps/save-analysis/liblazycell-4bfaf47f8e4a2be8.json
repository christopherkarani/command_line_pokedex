{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.18.1","compilation":{"directory":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,97,122,121,99,101,108,108,45,49,46,50,46,49],"program":"/Users/apples/.rustup/toolchains/nightly-x86_64-apple-darwin/bin/rls","arguments":["--crate-name","lazycell","/Users/apples/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.2.1/src/lib.rs","--color","never","--crate-type","lib","--emit=dep-info,metadata","-C","debuginfo=2","-C","metadata=4bfaf47f8e4a2be8","-C","extra-filename=-4bfaf47f8e4a2be8","--out-dir","/Users/apples/Desktop/command_line_pokedex/target/rls/debug/deps","-L","dependency=/Users/apples/Desktop/command_line_pokedex/target/rls/debug/deps","--cap-lints","allow","--error-format=json","--sysroot","/Users/apples/.rustup/toolchains/nightly-x86_64-apple-darwin"],"output":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,68,101,115,107,116,111,112,47,99,111,109,109,97,110,100,95,108,105,110,101,95,112,111,107,101,100,101,120,47,116,97,114,103,101,116,47,114,108,115,47,100,101,98,117,103,47,100,101,112,115,47,108,105,98,108,97,122,121,99,101,108,108,45,52,98,102,97,102,52,55,102,56,101,52,97,50,98,101,56,46,114,109,101,116,97]},"prelude":{"crate_id":{"name":"lazycell","disambiguator":[17921710381591262929,14882787193234621695]},"crate_root":"/Users/apples/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.2.1/src","external_crates":[{"file_name":"/Users/apples/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.2.1/src/lib.rs","num":1,"id":{"name":"core","disambiguator":[11032240498842541725,2432057140917246171]}},{"file_name":"/Users/apples/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.2.1/src/lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[1895553238457761685,16857640017500260029]}}],"span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,97,122,121,99,101,108,108,45,49,46,50,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":527,"byte_end":19747,"line_start":11,"line_end":649,"column_start":1,"column_end":2}},"imports":[],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,97,122,121,99,101,108,108,45,49,46,50,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":527,"byte_end":19747,"line_start":11,"line_end":649,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/Users/apples/.cargo/registry/src/github.com-1ecc6299db9ec823/lazycell-1.2.1/src/lib.rs","parent":null,"children":[{"krate":0,"index":2},{"krate":0,"index":4},{"krate":0,"index":6},{"krate":0,"index":8},{"krate":0,"index":10},{"krate":0,"index":12},{"krate":0,"index":14},{"krate":0,"index":86},{"krate":0,"index":92},{"krate":0,"index":88},{"krate":0,"index":20},{"krate":0,"index":44},{"krate":0,"index":48},{"krate":0,"index":52},{"krate":0,"index":54},{"krate":0,"index":56},{"krate":0,"index":96},{"krate":0,"index":102},{"krate":0,"index":98},{"krate":0,"index":58},{"krate":0,"index":74},{"krate":0,"index":78},{"krate":0,"index":82},{"krate":0,"index":84}],"decl_id":null,"docs":" This crate provides a `LazyCell` struct which acts as a lazily filled\n `Cell`.","sig":null,"attributes":[{"value":"no_std","span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,97,122,121,99,101,108,108,45,49,46,50,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":550,"byte_end":556,"line_start":11,"line_end":11,"column_start":24,"column_end":30}},{"value":"deny(missing_docs)","span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,97,122,121,99,101,108,108,45,49,46,50,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":560,"byte_end":582,"line_start":13,"line_end":13,"column_start":1,"column_end":23}}]},{"kind":"Struct","id":{"krate":0,"index":86},"span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,97,122,121,99,101,108,108,45,49,46,50,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2095,"byte_end":2103,"line_start":62,"line_end":62,"column_start":12,"column_end":20},"name":"LazyCell","qualname":"::LazyCell","value":"LazyCell {  }","parent":null,"children":[{"krate":0,"index":51}],"decl_id":null,"docs":" A lazily filled `Cell`, with mutable contents.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":22},"span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,97,122,121,99,101,108,108,45,49,46,50,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2221,"byte_end":2224,"line_start":68,"line_end":68,"column_start":12,"column_end":15},"name":"new","qualname":"<LazyCell<T>>::new","value":"fn () -> LazyCell<T>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new, empty, `LazyCell`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":24},"span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,97,122,121,99,101,108,108,45,49,46,50,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2432,"byte_end":2436,"line_start":75,"line_end":75,"column_start":12,"column_end":16},"name":"fill","qualname":"<LazyCell<T>>::fill","value":"fn (&self, value: T) -> Result<(), T>","parent":null,"children":[],"decl_id":null,"docs":" Put a value into this cell.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":26},"span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,97,122,121,99,101,108,108,45,49,46,50,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3106,"byte_end":3113,"line_start":95,"line_end":95,"column_start":12,"column_end":19},"name":"replace","qualname":"<LazyCell<T>>::replace","value":"fn (&mut self, value: T) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Put a value into this cell.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":28},"span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,97,122,121,99,101,108,108,45,49,46,50,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3296,"byte_end":3302,"line_start":100,"line_end":100,"column_start":12,"column_end":18},"name":"filled","qualname":"<LazyCell<T>>::filled","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Test whether this cell has been previously filled.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":30},"span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,97,122,121,99,101,108,108,45,49,46,50,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3611,"byte_end":3617,"line_start":109,"line_end":109,"column_start":12,"column_end":18},"name":"borrow","qualname":"<LazyCell<T>>::borrow","value":"fn (&self) -> Option<&T>","parent":null,"children":[],"decl_id":null,"docs":" Borrows the contents of this lazy cell for the duration of the cell\n itself.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":32},"span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,97,122,121,99,101,108,108,45,49,46,50,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3955,"byte_end":3965,"line_start":118,"line_end":118,"column_start":12,"column_end":22},"name":"borrow_mut","qualname":"<LazyCell<T>>::borrow_mut","value":"fn (&mut self) -> Option<&mut T>","parent":null,"children":[],"decl_id":null,"docs":" Borrows the contents of this lazy cell mutably for the duration of the cell\n itself.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":34},"span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,97,122,121,99,101,108,108,45,49,46,50,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4373,"byte_end":4384,"line_start":131,"line_end":131,"column_start":12,"column_end":23},"name":"borrow_with","qualname":"<LazyCell<T>>::borrow_with","value":"fn <F> (&self, f: F) -> &T","parent":null,"children":[],"decl_id":null,"docs":" Borrows the contents of this lazy cell for the duration of the cell\n itself.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":36},"span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,97,122,121,99,101,108,108,45,49,46,50,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5006,"byte_end":5021,"line_start":151,"line_end":151,"column_start":12,"column_end":27},"name":"borrow_mut_with","qualname":"<LazyCell<T>>::borrow_mut_with","value":"fn <F> (&mut self, f: F) -> &mut T","parent":null,"children":[],"decl_id":null,"docs":" Borrows the contents of this `LazyCell` mutably for the duration of the\n cell itself.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":38},"span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,97,122,121,99,101,108,108,45,49,46,50,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5494,"byte_end":5509,"line_start":167,"line_end":167,"column_start":12,"column_end":27},"name":"try_borrow_with","qualname":"<LazyCell<T>>::try_borrow_with","value":"fn <E, F> (&self, f: F) -> Result<&T, E>","parent":null,"children":[],"decl_id":null,"docs":" Same as `borrow_with`, but allows the initializing function to fail.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":40},"span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,97,122,121,99,101,108,108,45,49,46,50,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6054,"byte_end":6073,"line_start":185,"line_end":185,"column_start":12,"column_end":31},"name":"try_borrow_mut_with","qualname":"<LazyCell<T>>::try_borrow_mut_with","value":"fn <E, F> (&mut self, f: F) -> Result<&mut T, E>","parent":null,"children":[],"decl_id":null,"docs":" Same as `borrow_mut_with`, but allows the initializing function to fail.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":42},"span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,97,122,121,99,101,108,108,45,49,46,50,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6522,"byte_end":6532,"line_start":199,"line_end":199,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<LazyCell<T>>::into_inner","value":"fn (self) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Consumes this `LazyCell`, returning the underlying value.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":46},"span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,97,122,121,99,101,108,108,45,49,46,50,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":7068,"byte_end":7071,"line_start":213,"line_end":213,"column_start":12,"column_end":15},"name":"get","qualname":"<LazyCell<T>>::get","value":"fn (&self) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Returns a copy of the contents of the lazy cell.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":96},"span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,97,122,121,99,101,108,108,45,49,46,50,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":7751,"byte_end":7765,"line_start":236,"line_end":236,"column_start":12,"column_end":26},"name":"AtomicLazyCell","qualname":"::AtomicLazyCell","value":"AtomicLazyCell {  }","parent":null,"children":[{"krate":0,"index":59},{"krate":0,"index":61}],"decl_id":null,"docs":" A lazily filled and thread-safe `Cell`, with frozen contents.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":60},"span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,97,122,121,99,101,108,108,45,49,46,50,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":7909,"byte_end":7913,"line_start":243,"line_end":243,"column_start":15,"column_end":19},"name":"NONE","qualname":"::<AtomicLazyCell<T>>::NONE","value":"Self","parent":{"krate":0,"index":58},"children":[],"decl_id":null,"docs":" An empty `AtomicLazyCell`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":62},"span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,97,122,121,99,101,108,108,45,49,46,50,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":8073,"byte_end":8076,"line_start":249,"line_end":249,"column_start":12,"column_end":15},"name":"new","qualname":"<AtomicLazyCell<T>>::new","value":"fn () -> AtomicLazyCell<T>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new, empty, `AtomicLazyCell`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":64},"span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,97,122,121,99,101,108,108,45,49,46,50,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":8259,"byte_end":8263,"line_start":256,"line_end":256,"column_start":12,"column_end":16},"name":"fill","qualname":"<AtomicLazyCell<T>>::fill","value":"fn (&self, t: T) -> Result<(), T>","parent":null,"children":[],"decl_id":null,"docs":" Put a value into this cell.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":66},"span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,97,122,121,99,101,108,108,45,49,46,50,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":9080,"byte_end":9087,"line_start":280,"line_end":280,"column_start":12,"column_end":19},"name":"replace","qualname":"<AtomicLazyCell<T>>::replace","value":"fn (&mut self, value: T) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Put a value into this cell.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":68},"span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,97,122,121,99,101,108,108,45,49,46,50,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":9422,"byte_end":9428,"line_start":289,"line_end":289,"column_start":12,"column_end":18},"name":"filled","qualname":"<AtomicLazyCell<T>>::filled","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Test whether this cell has been previously filled.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":70},"span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,97,122,121,99,101,108,108,45,49,46,50,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":9756,"byte_end":9762,"line_start":298,"line_end":298,"column_start":12,"column_end":18},"name":"borrow","qualname":"<AtomicLazyCell<T>>::borrow","value":"fn (&self) -> Option<&T>","parent":null,"children":[],"decl_id":null,"docs":" Borrows the contents of this lazy cell for the duration of the cell\n itself.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":72},"span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,97,122,121,99,101,108,108,45,49,46,50,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":10014,"byte_end":10024,"line_start":306,"line_end":306,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<AtomicLazyCell<T>>::into_inner","value":"fn (self) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Consumes this `LazyCell`, returning the underlying value.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":76},"span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,97,122,121,99,101,108,108,45,49,46,50,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":10566,"byte_end":10569,"line_start":320,"line_end":320,"column_start":12,"column_end":15},"name":"get","qualname":"<AtomicLazyCell<T>>::get","value":"fn (&self) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Returns a copy of the contents of the lazy cell.","sig":null,"attributes":[]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,97,122,121,99,101,108,108,45,49,46,50,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2154,"byte_end":2162,"line_start":66,"line_end":66,"column_start":9,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":22},{"krate":0,"index":24},{"krate":0,"index":26},{"krate":0,"index":28},{"krate":0,"index":30},{"krate":0,"index":32},{"krate":0,"index":34},{"krate":0,"index":36},{"krate":0,"index":38},{"krate":0,"index":40},{"krate":0,"index":42}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,97,122,121,99,101,108,108,45,49,46,50,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6837,"byte_end":6845,"line_start":208,"line_end":208,"column_start":15,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":46}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,97,122,121,99,101,108,108,45,49,46,50,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":7166,"byte_end":7174,"line_start":218,"line_end":218,"column_start":27,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":50}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,97,122,121,99,101,108,108,45,49,46,50,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":7840,"byte_end":7854,"line_start":241,"line_end":241,"column_start":9,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":60},{"krate":0,"index":62},{"krate":0,"index":64},{"krate":0,"index":66},{"krate":0,"index":68},{"krate":0,"index":70},{"krate":0,"index":72}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,97,122,121,99,101,108,108,45,49,46,50,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":10329,"byte_end":10343,"line_start":315,"line_end":315,"column_start":15,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":76}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,97,122,121,99,101,108,108,45,49,46,50,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":10760,"byte_end":10774,"line_start":328,"line_end":328,"column_start":26,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":80}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,97,122,121,99,101,108,108,45,49,46,50,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":11336,"byte_end":11350,"line_start":345,"line_end":345,"column_start":38,"column_end":52},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,97,122,121,99,101,108,108,45,49,46,50,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":11388,"byte_end":11402,"line_start":347,"line_end":347,"column_start":31,"column_end":45},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,97,122,121,99,101,108,108,45,49,46,50,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2154,"byte_end":2162,"line_start":66,"line_end":66,"column_start":9,"column_end":17},"kind":{"variant":"Impl","fields":[0]},"from":{"krate":0,"index":86},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,97,122,121,99,101,108,108,45,49,46,50,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6837,"byte_end":6845,"line_start":208,"line_end":208,"column_start":15,"column_end":23},"kind":{"variant":"Impl","fields":[1]},"from":{"krate":0,"index":86},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,97,122,121,99,101,108,108,45,49,46,50,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":7166,"byte_end":7174,"line_start":218,"line_end":218,"column_start":27,"column_end":35},"kind":{"variant":"Impl","fields":[2]},"from":{"krate":0,"index":86},"to":{"krate":1,"index":2550}},{"span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,97,122,121,99,101,108,108,45,49,46,50,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":7840,"byte_end":7854,"line_start":241,"line_end":241,"column_start":9,"column_end":23},"kind":{"variant":"Impl","fields":[3]},"from":{"krate":0,"index":96},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,97,122,121,99,101,108,108,45,49,46,50,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":10329,"byte_end":10343,"line_start":315,"line_end":315,"column_start":15,"column_end":29},"kind":{"variant":"Impl","fields":[4]},"from":{"krate":0,"index":96},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,97,122,121,99,101,108,108,45,49,46,50,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":10760,"byte_end":10774,"line_start":328,"line_end":328,"column_start":26,"column_end":40},"kind":{"variant":"Impl","fields":[5]},"from":{"krate":0,"index":96},"to":{"krate":1,"index":2550}},{"span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,97,122,121,99,101,108,108,45,49,46,50,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":11336,"byte_end":11350,"line_start":345,"line_end":345,"column_start":38,"column_end":52},"kind":{"variant":"Impl","fields":[6]},"from":{"krate":0,"index":96},"to":{"krate":1,"index":1684}},{"span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,108,97,122,121,99,101,108,108,45,49,46,50,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":11388,"byte_end":11402,"line_start":347,"line_end":347,"column_start":31,"column_end":45},"kind":{"variant":"Impl","fields":[7]},"from":{"krate":0,"index":96},"to":{"krate":1,"index":1672}}]}