{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.18.1","compilation":{"directory":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,55],"program":"/Users/apples/.rustup/toolchains/nightly-x86_64-apple-darwin/bin/rls","arguments":["--crate-name","byteorder","/Users/apples/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.7/src/lib.rs","--color","never","--crate-type","lib","--emit=dep-info,metadata","-C","debuginfo=2","--cfg","feature=\"default\"","--cfg","feature=\"std\"","-C","metadata=72bfe61f2f028962","-C","extra-filename=-72bfe61f2f028962","--out-dir","/Users/apples/Desktop/command_line_pokedex/target/rls/debug/deps","-L","dependency=/Users/apples/Desktop/command_line_pokedex/target/rls/debug/deps","--cap-lints","allow","--error-format=json","--sysroot","/Users/apples/.rustup/toolchains/nightly-x86_64-apple-darwin"],"output":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,68,101,115,107,116,111,112,47,99,111,109,109,97,110,100,95,108,105,110,101,95,112,111,107,101,100,101,120,47,116,97,114,103,101,116,47,114,108,115,47,100,101,98,117,103,47,100,101,112,115,47,108,105,98,98,121,116,101,111,114,100,101,114,45,55,50,98,102,101,54,49,102,50,102,48,50,56,57,54,50,46,114,109,101,116,97]},"prelude":{"crate_id":{"name":"byteorder","disambiguator":[11823231113846136679,9342867522270232101]},"crate_root":"/Users/apples/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.7/src","external_crates":[{"file_name":"/Users/apples/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.7/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[4389547861531967874,4087000726966765083]}},{"file_name":"/Users/apples/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.7/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[11032240498842541725,2432057140917246171]}},{"file_name":"/Users/apples/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.7/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[1895553238457761685,16857640017500260029]}},{"file_name":"/Users/apples/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.7/src/lib.rs","num":4,"id":{"name":"alloc","disambiguator":[15832230302727928541,9588802089311960002]}},{"file_name":"/Users/apples/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.7/src/lib.rs","num":5,"id":{"name":"libc","disambiguator":[6716647803596312003,10833435238760970833]}},{"file_name":"/Users/apples/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.7/src/lib.rs","num":6,"id":{"name":"unwind","disambiguator":[4365380295245643280,9464345992969757060]}},{"file_name":"/Users/apples/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.7/src/lib.rs","num":7,"id":{"name":"panic_unwind","disambiguator":[6158679394116410202,17211381475699568518]}}],"span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":0,"byte_end":101372,"line_start":1,"line_end":3249,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":34},"span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2417,"byte_end":2429,"line_start":76,"line_end":76,"column_start":14,"column_end":26},"alias_span":null,"name":"ReadBytesExt","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":90},"span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2431,"byte_end":2444,"line_start":76,"line_end":76,"column_start":28,"column_end":41},"alias_span":null,"name":"WriteBytesExt","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":0,"byte_end":101372,"line_start":1,"line_end":3249,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/Users/apples/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.7/src/lib.rs","parent":null,"children":[{"krate":0,"index":2},{"krate":0,"index":4},{"krate":0,"index":6},{"krate":0,"index":8},{"krate":0,"index":10},{"krate":0,"index":12},{"krate":0,"index":14},{"krate":0,"index":16},{"krate":0,"index":22},{"krate":0,"index":130},{"krate":0,"index":132},{"krate":0,"index":134},{"krate":0,"index":136},{"krate":0,"index":144},{"krate":0,"index":356},{"krate":0,"index":384},{"krate":0,"index":382},{"krate":0,"index":378},{"krate":0,"index":374},{"krate":0,"index":370},{"krate":0,"index":366},{"krate":0,"index":362},{"krate":0,"index":358},{"krate":0,"index":250},{"krate":0,"index":254},{"krate":0,"index":388},{"krate":0,"index":416},{"krate":0,"index":414},{"krate":0,"index":410},{"krate":0,"index":406},{"krate":0,"index":402},{"krate":0,"index":398},{"krate":0,"index":394},{"krate":0,"index":390},{"krate":0,"index":256},{"krate":0,"index":260},{"krate":0,"index":262},{"krate":0,"index":264},{"krate":0,"index":266},{"krate":0,"index":268},{"krate":0,"index":270},{"krate":0,"index":272},{"krate":0,"index":274},{"krate":0,"index":276},{"krate":0,"index":316}],"decl_id":null,"docs":"This crate provides convenience methods for encoding and decoding numbers\nin either [big-endian or little-endian order].","sig":null,"attributes":[{"value":"deny(missing_docs)","span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2171,"byte_end":2193,"line_start":64,"line_end":64,"column_start":1,"column_end":23}}]},{"kind":"Trait","id":{"krate":0,"index":34},"span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,55,47,115,114,99,47,105,111,46,114,115],"byte_start":102253,"byte_end":102265,"line_start":28,"line_end":28,"column_start":11,"column_end":23},"name":"ReadBytesExt","qualname":"::io::ReadBytesExt","value":"ReadBytesExt: io::Read","parent":null,"children":[{"krate":0,"index":36},{"krate":0,"index":38},{"krate":0,"index":40},{"krate":0,"index":42},{"krate":0,"index":44},{"krate":0,"index":46},{"krate":0,"index":48},{"krate":0,"index":50},{"krate":0,"index":52},{"krate":0,"index":54},{"krate":0,"index":56},{"krate":0,"index":58},{"krate":0,"index":60},{"krate":0,"index":62},{"krate":0,"index":64},{"krate":0,"index":66},{"krate":0,"index":68},{"krate":0,"index":70},{"krate":0,"index":72},{"krate":0,"index":74},{"krate":0,"index":76},{"krate":0,"index":78},{"krate":0,"index":80},{"krate":0,"index":82},{"krate":0,"index":84},{"krate":0,"index":86}],"decl_id":null,"docs":" Extends [`Read`] with methods for reading numbers. (For `std::io`.)","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":36},"span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,55,47,115,114,99,47,105,111,46,114,115],"byte_start":103047,"byte_end":103054,"line_start":53,"line_end":53,"column_start":8,"column_end":15},"name":"read_u8","qualname":"::io::ReadBytesExt::read_u8","value":"fn (&mut self) -> Result<u8>","parent":{"krate":0,"index":34},"children":[],"decl_id":null,"docs":" Reads an unsigned 8 bit integer from the underlying reader.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,55,47,115,114,99,47,105,111,46,114,115],"byte_start":103030,"byte_end":103039,"line_start":52,"line_end":52,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":38},"span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,55,47,115,114,99,47,105,111,46,114,115],"byte_start":103950,"byte_end":103957,"line_start":83,"line_end":83,"column_start":8,"column_end":15},"name":"read_i8","qualname":"::io::ReadBytesExt::read_i8","value":"fn (&mut self) -> Result<i8>","parent":{"krate":0,"index":34},"children":[],"decl_id":null,"docs":" Reads a signed 8 bit integer from the underlying reader.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,55,47,115,114,99,47,105,111,46,114,115],"byte_start":103933,"byte_end":103942,"line_start":82,"line_end":82,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":40},"span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,55,47,115,114,99,47,105,111,46,114,115],"byte_start":104786,"byte_end":104794,"line_start":110,"line_end":110,"column_start":8,"column_end":16},"name":"read_u16","qualname":"::io::ReadBytesExt::read_u16","value":"fn <T> (&mut self) -> Result<u16>","parent":{"krate":0,"index":34},"children":[],"decl_id":null,"docs":" Reads an unsigned 16 bit integer from the underlying reader.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,55,47,115,114,99,47,105,111,46,114,115],"byte_start":104769,"byte_end":104778,"line_start":109,"line_end":109,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":42},"span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,55,47,115,114,99,47,105,111,46,114,115],"byte_start":105651,"byte_end":105659,"line_start":137,"line_end":137,"column_start":8,"column_end":16},"name":"read_i16","qualname":"::io::ReadBytesExt::read_i16","value":"fn <T> (&mut self) -> Result<i16>","parent":{"krate":0,"index":34},"children":[],"decl_id":null,"docs":" Reads a signed 16 bit integer from the underlying reader.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,55,47,115,114,99,47,105,111,46,114,115],"byte_start":105634,"byte_end":105643,"line_start":136,"line_end":136,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":44},"span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,55,47,115,114,99,47,105,111,46,114,115],"byte_start":106451,"byte_end":106459,"line_start":163,"line_end":163,"column_start":8,"column_end":16},"name":"read_u24","qualname":"::io::ReadBytesExt::read_u24","value":"fn <T> (&mut self) -> Result<u32>","parent":{"krate":0,"index":34},"children":[],"decl_id":null,"docs":" Reads an unsigned 24 bit integer from the underlying reader.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,55,47,115,114,99,47,105,111,46,114,115],"byte_start":106434,"byte_end":106443,"line_start":162,"line_end":162,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":46},"span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,55,47,115,114,99,47,105,111,46,114,115],"byte_start":107249,"byte_end":107257,"line_start":189,"line_end":189,"column_start":8,"column_end":16},"name":"read_i24","qualname":"::io::ReadBytesExt::read_i24","value":"fn <T> (&mut self) -> Result<i32>","parent":{"krate":0,"index":34},"children":[],"decl_id":null,"docs":" Reads a signed 24 bit integer from the underlying reader.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,55,47,115,114,99,47,105,111,46,114,115],"byte_start":107232,"byte_end":107241,"line_start":188,"line_end":188,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":48},"span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,55,47,115,114,99,47,105,111,46,114,115],"byte_start":108055,"byte_end":108063,"line_start":215,"line_end":215,"column_start":8,"column_end":16},"name":"read_u32","qualname":"::io::ReadBytesExt::read_u32","value":"fn <T> (&mut self) -> Result<u32>","parent":{"krate":0,"index":34},"children":[],"decl_id":null,"docs":" Reads an unsigned 32 bit integer from the underlying reader.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,55,47,115,114,99,47,105,111,46,114,115],"byte_start":108038,"byte_end":108047,"line_start":214,"line_end":214,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":50},"span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,55,47,115,114,99,47,105,111,46,114,115],"byte_start":108859,"byte_end":108867,"line_start":241,"line_end":241,"column_start":8,"column_end":16},"name":"read_i32","qualname":"::io::ReadBytesExt::read_i32","value":"fn <T> (&mut self) -> Result<i32>","parent":{"krate":0,"index":34},"children":[],"decl_id":null,"docs":" Reads a signed 32 bit integer from the underlying reader.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,55,47,115,114,99,47,105,111,46,114,115],"byte_start":108842,"byte_end":108851,"line_start":240,"line_end":240,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":52},"span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,55,47,115,114,99,47,105,111,46,114,115],"byte_start":109689,"byte_end":109697,"line_start":267,"line_end":267,"column_start":8,"column_end":16},"name":"read_u48","qualname":"::io::ReadBytesExt::read_u48","value":"fn <T> (&mut self) -> Result<u64>","parent":{"krate":0,"index":34},"children":[],"decl_id":null,"docs":" Reads an unsigned 48 bit integer from the underlying reader.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,55,47,115,114,99,47,105,111,46,114,115],"byte_start":109672,"byte_end":109681,"line_start":266,"line_end":266,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":54},"span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,55,47,115,114,99,47,105,111,46,114,115],"byte_start":110515,"byte_end":110523,"line_start":293,"line_end":293,"column_start":8,"column_end":16},"name":"read_i48","qualname":"::io::ReadBytesExt::read_i48","value":"fn <T> (&mut self) -> Result<i64>","parent":{"krate":0,"index":34},"children":[],"decl_id":null,"docs":" Reads a signed 48 bit integer from the underlying reader.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,55,47,115,114,99,47,105,111,46,114,115],"byte_start":110498,"byte_end":110507,"line_start":292,"line_end":292,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":56},"span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,55,47,115,114,99,47,105,111,46,114,115],"byte_start":111359,"byte_end":111367,"line_start":319,"line_end":319,"column_start":8,"column_end":16},"name":"read_u64","qualname":"::io::ReadBytesExt::read_u64","value":"fn <T> (&mut self) -> Result<u64>","parent":{"krate":0,"index":34},"children":[],"decl_id":null,"docs":" Reads an unsigned 64 bit integer from the underlying reader.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,55,47,115,114,99,47,105,111,46,114,115],"byte_start":111342,"byte_end":111351,"line_start":318,"line_end":318,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":58},"span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,55,47,115,114,99,47,105,111,46,114,115],"byte_start":112177,"byte_end":112185,"line_start":345,"line_end":345,"column_start":8,"column_end":16},"name":"read_i64","qualname":"::io::ReadBytesExt::read_i64","value":"fn <T> (&mut self) -> Result<i64>","parent":{"krate":0,"index":34},"children":[],"decl_id":null,"docs":" Reads a signed 64 bit integer from the underlying reader.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,55,47,115,114,99,47,105,111,46,114,115],"byte_start":112160,"byte_end":112169,"line_start":344,"line_end":344,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":60},"span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,55,47,115,114,99,47,105,111,46,114,115],"byte_start":114866,"byte_end":114875,"line_start":428,"line_end":428,"column_start":8,"column_end":17},"name":"read_uint","qualname":"::io::ReadBytesExt::read_uint","value":"fn <T> (&mut self, nbytes: usize) -> Result<u64>","parent":{"krate":0,"index":34},"children":[],"decl_id":null,"docs":" Reads an unsigned n-bytes integer from the underlying reader.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,55,47,115,114,99,47,105,111,46,114,115],"byte_start":114849,"byte_end":114858,"line_start":427,"line_end":427,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":62},"span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,55,47,115,114,99,47,105,111,46,114,115],"byte_start":115705,"byte_end":115713,"line_start":453,"line_end":453,"column_start":8,"column_end":16},"name":"read_int","qualname":"::io::ReadBytesExt::read_int","value":"fn <T> (&mut self, nbytes: usize) -> Result<i64>","parent":{"krate":0,"index":34},"children":[],"decl_id":null,"docs":" Reads a signed n-bytes integer from the underlying reader.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,55,47,115,114,99,47,105,111,46,114,115],"byte_start":115688,"byte_end":115697,"line_start":452,"line_end":452,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":64},"span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,55,47,115,114,99,47,105,111,46,114,115],"byte_start":117334,"byte_end":117342,"line_start":502,"line_end":502,"column_start":8,"column_end":16},"name":"read_f32","qualname":"::io::ReadBytesExt::read_f32","value":"fn <T> (&mut self) -> Result<f32>","parent":{"krate":0,"index":34},"children":[],"decl_id":null,"docs":" Reads a IEEE754 single-precision (4 bytes) floating point number from\n the underlying reader.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,55,47,115,114,99,47,105,111,46,114,115],"byte_start":117317,"byte_end":117326,"line_start":501,"line_end":501,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":66},"span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,55,47,115,114,99,47,105,111,46,114,115],"byte_start":118285,"byte_end":118293,"line_start":533,"line_end":533,"column_start":8,"column_end":16},"name":"read_f64","qualname":"::io::ReadBytesExt::read_f64","value":"fn <T> (&mut self) -> Result<f64>","parent":{"krate":0,"index":34},"children":[],"decl_id":null,"docs":" Reads a IEEE754 double-precision (8 bytes) floating point number from\n the underlying reader.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,55,47,115,114,99,47,105,111,46,114,115],"byte_start":118268,"byte_end":118277,"line_start":532,"line_end":532,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":68},"span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,55,47,115,114,99,47,105,111,46,114,115],"byte_start":119334,"byte_end":119347,"line_start":565,"line_end":565,"column_start":8,"column_end":21},"name":"read_u16_into","qualname":"::io::ReadBytesExt::read_u16_into","value":"fn <T> (&mut self, dst: &mut [u16]) -> Result<()>","parent":{"krate":0,"index":34},"children":[],"decl_id":null,"docs":" Reads a sequence of unsigned 16 bit integers from the underlying\n reader.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,55,47,115,114,99,47,105,111,46,114,115],"byte_start":119317,"byte_end":119326,"line_start":564,"line_end":564,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":70},"span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,55,47,115,114,99,47,105,111,46,114,115],"byte_start":120477,"byte_end":120490,"line_start":600,"line_end":600,"column_start":8,"column_end":21},"name":"read_u32_into","qualname":"::io::ReadBytesExt::read_u32_into","value":"fn <T> (&mut self, dst: &mut [u32]) -> Result<()>","parent":{"krate":0,"index":34},"children":[],"decl_id":null,"docs":" Reads a sequence of unsigned 32 bit integers from the underlying\n reader.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,55,47,115,114,99,47,105,111,46,114,115],"byte_start":120460,"byte_end":120469,"line_start":599,"line_end":599,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":72},"span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,55,47,115,114,99,47,105,111,46,114,115],"byte_start":121679,"byte_end":121692,"line_start":638,"line_end":638,"column_start":8,"column_end":21},"name":"read_u64_into","qualname":"::io::ReadBytesExt::read_u64_into","value":"fn <T> (&mut self, dst: &mut [u64]) -> Result<()>","parent":{"krate":0,"index":34},"children":[],"decl_id":null,"docs":" Reads a sequence of unsigned 64 bit integers from the underlying\n reader.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,55,47,115,114,99,47,105,111,46,114,115],"byte_start":121662,"byte_end":121671,"line_start":637,"line_end":637,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":74},"span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,55,47,115,114,99,47,105,111,46,114,115],"byte_start":124114,"byte_end":124127,"line_start":715,"line_end":715,"column_start":8,"column_end":21},"name":"read_i16_into","qualname":"::io::ReadBytesExt::read_i16_into","value":"fn <T> (&mut self, dst: &mut [i16]) -> Result<()>","parent":{"krate":0,"index":34},"children":[],"decl_id":null,"docs":" Reads a sequence of signed 16 bit integers from the underlying\n reader.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,55,47,115,114,99,47,105,111,46,114,115],"byte_start":124097,"byte_end":124106,"line_start":714,"line_end":714,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":76},"span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,55,47,115,114,99,47,105,111,46,114,115],"byte_start":125253,"byte_end":125266,"line_start":750,"line_end":750,"column_start":8,"column_end":21},"name":"read_i32_into","qualname":"::io::ReadBytesExt::read_i32_into","value":"fn <T> (&mut self, dst: &mut [i32]) -> Result<()>","parent":{"krate":0,"index":34},"children":[],"decl_id":null,"docs":" Reads a sequence of signed 32 bit integers from the underlying\n reader.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,55,47,115,114,99,47,105,111,46,114,115],"byte_start":125236,"byte_end":125245,"line_start":749,"line_end":749,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":78},"span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,55,47,115,114,99,47,105,111,46,114,115],"byte_start":126451,"byte_end":126464,"line_start":788,"line_end":788,"column_start":8,"column_end":21},"name":"read_i64_into","qualname":"::io::ReadBytesExt::read_i64_into","value":"fn <T> (&mut self, dst: &mut [i64]) -> Result<()>","parent":{"krate":0,"index":34},"children":[],"decl_id":null,"docs":" Reads a sequence of signed 64 bit integers from the underlying\n reader.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,55,47,115,114,99,47,105,111,46,114,115],"byte_start":126434,"byte_end":126443,"line_start":787,"line_end":787,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":80},"span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,55,47,115,114,99,47,105,111,46,114,115],"byte_start":129056,"byte_end":129069,"line_start":871,"line_end":871,"column_start":8,"column_end":21},"name":"read_f32_into","qualname":"::io::ReadBytesExt::read_f32_into","value":"fn <T> (&mut self, dst: &mut [f32]) -> Result<()>","parent":{"krate":0,"index":34},"children":[],"decl_id":null,"docs":" Reads a sequence of IEEE754 single-precision (4 bytes) floating\n point numbers from the underlying reader.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,55,47,115,114,99,47,105,111,46,114,115],"byte_start":129039,"byte_end":129048,"line_start":870,"line_end":870,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":82},"span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,55,47,115,114,99,47,105,111,46,114,115],"byte_start":130570,"byte_end":130593,"line_start":920,"line_end":920,"column_start":8,"column_end":31},"name":"read_f32_into_unchecked","qualname":"::io::ReadBytesExt::read_f32_into_unchecked","value":"fn <T> (&mut self, dst: &mut [f32]) -> Result<()>","parent":{"krate":0,"index":34},"children":[],"decl_id":null,"docs":" **DEPRECATED**.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,55,47,115,114,99,47,105,111,46,114,115],"byte_start":130477,"byte_end":130486,"line_start":918,"line_end":918,"column_start":5,"column_end":14}},{"value":"deprecated(since = \"1.2.0\", note = \"please use `read_f32_into` instead\")","span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,55,47,115,114,99,47,105,111,46,114,115],"byte_start":130491,"byte_end":130562,"line_start":919,"line_end":919,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":84},"span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,55,47,115,114,99,47,105,111,46,114,115],"byte_start":131827,"byte_end":131840,"line_start":959,"line_end":959,"column_start":8,"column_end":21},"name":"read_f64_into","qualname":"::io::ReadBytesExt::read_f64_into","value":"fn <T> (&mut self, dst: &mut [f64]) -> Result<()>","parent":{"krate":0,"index":34},"children":[],"decl_id":null,"docs":" Reads a sequence of IEEE754 double-precision (8 bytes) floating\n point numbers from the underlying reader.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,55,47,115,114,99,47,105,111,46,114,115],"byte_start":131810,"byte_end":131819,"line_start":958,"line_end":958,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":86},"span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,55,47,115,114,99,47,105,111,46,114,115],"byte_start":133640,"byte_end":133663,"line_start":1014,"line_end":1014,"column_start":8,"column_end":31},"name":"read_f64_into_unchecked","qualname":"::io::ReadBytesExt::read_f64_into_unchecked","value":"fn <T> (&mut self, dst: &mut [f64]) -> Result<()>","parent":{"krate":0,"index":34},"children":[],"decl_id":null,"docs":" **DEPRECATED**.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,55,47,115,114,99,47,105,111,46,114,115],"byte_start":133547,"byte_end":133556,"line_start":1012,"line_end":1012,"column_start":5,"column_end":14}},{"value":"deprecated(since = \"1.2.0\", note = \"please use `read_f64_into` instead\")","span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,55,47,115,114,99,47,105,111,46,114,115],"byte_start":133561,"byte_end":133632,"line_start":1013,"line_end":1013,"column_start":5,"column_end":76}}]},{"kind":"Trait","id":{"krate":0,"index":90},"span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,55,47,115,114,99,47,105,111,46,114,115],"byte_start":134715,"byte_end":134728,"line_start":1048,"line_end":1048,"column_start":11,"column_end":24},"name":"WriteBytesExt","qualname":"::io::WriteBytesExt","value":"WriteBytesExt: io::Write","parent":null,"children":[{"krate":0,"index":92},{"krate":0,"index":94},{"krate":0,"index":96},{"krate":0,"index":98},{"krate":0,"index":100},{"krate":0,"index":102},{"krate":0,"index":104},{"krate":0,"index":106},{"krate":0,"index":108},{"krate":0,"index":110},{"krate":0,"index":112},{"krate":0,"index":114},{"krate":0,"index":116},{"krate":0,"index":118},{"krate":0,"index":120},{"krate":0,"index":122}],"decl_id":null,"docs":" Extends [`Write`] with methods for writing numbers. (For `std::io`.)","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":92},"span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,55,47,115,114,99,47,105,111,46,114,115],"byte_start":135482,"byte_end":135490,"line_start":1073,"line_end":1073,"column_start":8,"column_end":16},"name":"write_u8","qualname":"::io::WriteBytesExt::write_u8","value":"fn (&mut self, n: u8) -> Result<()>","parent":{"krate":0,"index":90},"children":[],"decl_id":null,"docs":" Writes an unsigned 8 bit integer to the underlying writer.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,55,47,115,114,99,47,105,111,46,114,115],"byte_start":135465,"byte_end":135474,"line_start":1072,"line_end":1072,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":94},"span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,55,47,115,114,99,47,105,111,46,114,115],"byte_start":136297,"byte_end":136305,"line_start":1101,"line_end":1101,"column_start":8,"column_end":16},"name":"write_i8","qualname":"::io::WriteBytesExt::write_i8","value":"fn (&mut self, n: i8) -> Result<()>","parent":{"krate":0,"index":90},"children":[],"decl_id":null,"docs":" Writes a signed 8 bit integer to the underlying writer.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,55,47,115,114,99,47,105,111,46,114,115],"byte_start":136280,"byte_end":136289,"line_start":1100,"line_end":1100,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":96},"span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,55,47,115,114,99,47,105,111,46,114,115],"byte_start":137052,"byte_end":137061,"line_start":1126,"line_end":1126,"column_start":8,"column_end":17},"name":"write_u16","qualname":"::io::WriteBytesExt::write_u16","value":"fn <T> (&mut self, n: u16) -> Result<()>","parent":{"krate":0,"index":90},"children":[],"decl_id":null,"docs":" Writes an unsigned 16 bit integer to the underlying writer.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,55,47,115,114,99,47,105,111,46,114,115],"byte_start":137035,"byte_end":137044,"line_start":1125,"line_end":1125,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":98},"span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,55,47,115,114,99,47,105,111,46,114,115],"byte_start":137878,"byte_end":137887,"line_start":1153,"line_end":1153,"column_start":8,"column_end":17},"name":"write_i16","qualname":"::io::WriteBytesExt::write_i16","value":"fn <T> (&mut self, n: i16) -> Result<()>","parent":{"krate":0,"index":90},"children":[],"decl_id":null,"docs":" Writes a signed 16 bit integer to the underlying writer.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,55,47,115,114,99,47,105,111,46,114,115],"byte_start":137861,"byte_end":137870,"line_start":1152,"line_end":1152,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":100},"span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,55,47,115,114,99,47,105,111,46,114,115],"byte_start":138719,"byte_end":138728,"line_start":1180,"line_end":1180,"column_start":8,"column_end":17},"name":"write_u24","qualname":"::io::WriteBytesExt::write_u24","value":"fn <T> (&mut self, n: u32) -> Result<()>","parent":{"krate":0,"index":90},"children":[],"decl_id":null,"docs":" Writes an unsigned 24 bit integer to the underlying writer.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,55,47,115,114,99,47,105,111,46,114,115],"byte_start":138702,"byte_end":138711,"line_start":1179,"line_end":1179,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":102},"span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,55,47,115,114,99,47,105,111,46,114,115],"byte_start":139558,"byte_end":139567,"line_start":1207,"line_end":1207,"column_start":8,"column_end":17},"name":"write_i24","qualname":"::io::WriteBytesExt::write_i24","value":"fn <T> (&mut self, n: i32) -> Result<()>","parent":{"krate":0,"index":90},"children":[],"decl_id":null,"docs":" Writes a signed 24 bit integer to the underlying writer.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,55,47,115,114,99,47,105,111,46,114,115],"byte_start":139541,"byte_end":139550,"line_start":1206,"line_end":1206,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":104},"span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,55,47,115,114,99,47,105,111,46,114,115],"byte_start":140411,"byte_end":140420,"line_start":1234,"line_end":1234,"column_start":8,"column_end":17},"name":"write_u32","qualname":"::io::WriteBytesExt::write_u32","value":"fn <T> (&mut self, n: u32) -> Result<()>","parent":{"krate":0,"index":90},"children":[],"decl_id":null,"docs":" Writes an unsigned 32 bit integer to the underlying writer.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,55,47,115,114,99,47,105,111,46,114,115],"byte_start":140394,"byte_end":140403,"line_start":1233,"line_end":1233,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":106},"span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,55,47,115,114,99,47,105,111,46,114,115],"byte_start":141262,"byte_end":141271,"line_start":1261,"line_end":1261,"column_start":8,"column_end":17},"name":"write_i32","qualname":"::io::WriteBytesExt::write_i32","value":"fn <T> (&mut self, n: i32) -> Result<()>","parent":{"krate":0,"index":90},"children":[],"decl_id":null,"docs":" Writes a signed 32 bit integer to the underlying writer.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,55,47,115,114,99,47,105,111,46,114,115],"byte_start":141245,"byte_end":141254,"line_start":1260,"line_end":1260,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":108},"span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,55,47,115,114,99,47,105,111,46,114,115],"byte_start":142135,"byte_end":142144,"line_start":1288,"line_end":1288,"column_start":8,"column_end":17},"name":"write_u48","qualname":"::io::WriteBytesExt::write_u48","value":"fn <T> (&mut self, n: u64) -> Result<()>","parent":{"krate":0,"index":90},"children":[],"decl_id":null,"docs":" Writes an unsigned 48 bit integer to the underlying writer.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,55,47,115,114,99,47,105,111,46,114,115],"byte_start":142118,"byte_end":142127,"line_start":1287,"line_end":1287,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":110},"span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,55,47,115,114,99,47,105,111,46,114,115],"byte_start":143004,"byte_end":143013,"line_start":1315,"line_end":1315,"column_start":8,"column_end":17},"name":"write_i48","qualname":"::io::WriteBytesExt::write_i48","value":"fn <T> (&mut self, n: i64) -> Result<()>","parent":{"krate":0,"index":90},"children":[],"decl_id":null,"docs":" Writes a signed 48 bit integer to the underlying writer.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,55,47,115,114,99,47,105,111,46,114,115],"byte_start":142987,"byte_end":142996,"line_start":1314,"line_end":1314,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":112},"span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,55,47,115,114,99,47,105,111,46,114,115],"byte_start":143894,"byte_end":143903,"line_start":1342,"line_end":1342,"column_start":8,"column_end":17},"name":"write_u64","qualname":"::io::WriteBytesExt::write_u64","value":"fn <T> (&mut self, n: u64) -> Result<()>","parent":{"krate":0,"index":90},"children":[],"decl_id":null,"docs":" Writes an unsigned 64 bit integer to the underlying writer.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,55,47,115,114,99,47,105,111,46,114,115],"byte_start":143877,"byte_end":143886,"line_start":1341,"line_end":1341,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":114},"span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,55,47,115,114,99,47,105,111,46,114,115],"byte_start":144793,"byte_end":144802,"line_start":1369,"line_end":1369,"column_start":8,"column_end":17},"name":"write_i64","qualname":"::io::WriteBytesExt::write_i64","value":"fn <T> (&mut self, n: i64) -> Result<()>","parent":{"krate":0,"index":90},"children":[],"decl_id":null,"docs":" Writes a signed 64 bit integer to the underlying writer.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,55,47,115,114,99,47,105,111,46,114,115],"byte_start":144776,"byte_end":144785,"line_start":1368,"line_end":1368,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":116},"span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,55,47,115,114,99,47,105,111,46,114,115],"byte_start":146405,"byte_end":146415,"line_start":1419,"line_end":1419,"column_start":8,"column_end":18},"name":"write_uint","qualname":"::io::WriteBytesExt::write_uint","value":"fn <T> (&mut self, n: u64, nbytes: usize) -> Result<()>","parent":{"krate":0,"index":90},"children":[],"decl_id":null,"docs":" Writes an unsigned n-bytes integer to the underlying writer.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,55,47,115,114,99,47,105,111,46,114,115],"byte_start":146388,"byte_end":146397,"line_start":1418,"line_end":1418,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":118},"span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,55,47,115,114,99,47,105,111,46,114,115],"byte_start":147535,"byte_end":147544,"line_start":1455,"line_end":1455,"column_start":8,"column_end":17},"name":"write_int","qualname":"::io::WriteBytesExt::write_int","value":"fn <T> (&mut self, n: i64, nbytes: usize) -> Result<()>","parent":{"krate":0,"index":90},"children":[],"decl_id":null,"docs":" Writes a signed n-bytes integer to the underlying writer.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,55,47,115,114,99,47,105,111,46,114,115],"byte_start":147518,"byte_end":147527,"line_start":1454,"line_end":1454,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":120},"span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,55,47,115,114,99,47,105,111,46,114,115],"byte_start":149489,"byte_end":149498,"line_start":1520,"line_end":1520,"column_start":8,"column_end":17},"name":"write_f32","qualname":"::io::WriteBytesExt::write_f32","value":"fn <T> (&mut self, n: f32) -> Result<()>","parent":{"krate":0,"index":90},"children":[],"decl_id":null,"docs":" Writes a IEEE754 single-precision (4 bytes) floating point number to\n the underlying writer.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,55,47,115,114,99,47,105,111,46,114,115],"byte_start":149472,"byte_end":149481,"line_start":1519,"line_end":1519,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":122},"span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,55,47,115,114,99,47,105,111,46,114,115],"byte_start":150383,"byte_end":150392,"line_start":1549,"line_end":1549,"column_start":8,"column_end":17},"name":"write_f64","qualname":"::io::WriteBytesExt::write_f64","value":"fn <T> (&mut self, n: f64) -> Result<()>","parent":{"krate":0,"index":90},"children":[],"decl_id":null,"docs":" Writes a IEEE754 double-precision (8 bytes) floating point number to\n the underlying writer.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,55,47,115,114,99,47,105,111,46,114,115],"byte_start":150366,"byte_end":150375,"line_start":1548,"line_end":1548,"column_start":5,"column_end":14}}]},{"kind":"Trait","id":{"krate":0,"index":138},"span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4207,"byte_end":4213,"line_start":169,"line_end":169,"column_start":15,"column_end":21},"name":"Sealed","qualname":"::private::Sealed","value":"Sealed","parent":null,"children":[],"decl_id":null,"docs":" Sealed stops crates other than byteorder from implementing any traits\n that use it.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":144},"span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5461,"byte_end":5470,"line_start":209,"line_end":209,"column_start":11,"column_end":20},"name":"ByteOrder","qualname":"::ByteOrder","value":"ByteOrder: Clone + Copy + Debug + Default + Eq + Hash + Ord + PartialEq + PartialOrd +\nprivate::Sealed","parent":null,"children":[{"krate":0,"index":146},{"krate":0,"index":148},{"krate":0,"index":150},{"krate":0,"index":152},{"krate":0,"index":154},{"krate":0,"index":156},{"krate":0,"index":158},{"krate":0,"index":160},{"krate":0,"index":162},{"krate":0,"index":164},{"krate":0,"index":166},{"krate":0,"index":168},{"krate":0,"index":170},{"krate":0,"index":172},{"krate":0,"index":174},{"krate":0,"index":176},{"krate":0,"index":178},{"krate":0,"index":180},{"krate":0,"index":182},{"krate":0,"index":184},{"krate":0,"index":186},{"krate":0,"index":188},{"krate":0,"index":190},{"krate":0,"index":192},{"krate":0,"index":194},{"krate":0,"index":196},{"krate":0,"index":198},{"krate":0,"index":200},{"krate":0,"index":202},{"krate":0,"index":204},{"krate":0,"index":206},{"krate":0,"index":208},{"krate":0,"index":210},{"krate":0,"index":212},{"krate":0,"index":214},{"krate":0,"index":216},{"krate":0,"index":218},{"krate":0,"index":220},{"krate":0,"index":222},{"krate":0,"index":224},{"krate":0,"index":226},{"krate":0,"index":228},{"krate":0,"index":230},{"krate":0,"index":232},{"krate":0,"index":234},{"krate":0,"index":236},{"krate":0,"index":238},{"krate":0,"index":240},{"krate":0,"index":242},{"krate":0,"index":244},{"krate":0,"index":246},{"krate":0,"index":248}],"decl_id":null,"docs":" `ByteOrder` describes types that can serialize integers as bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":146},"span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5705,"byte_end":5713,"line_start":218,"line_end":218,"column_start":8,"column_end":16},"name":"read_u16","qualname":"::ByteOrder::read_u16","value":"fn (buf: &[u8]) -> u16","parent":{"krate":0,"index":144},"children":[],"decl_id":null,"docs":" Reads an unsigned 16 bit integer from `buf`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":148},"span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6222,"byte_end":6230,"line_start":237,"line_end":237,"column_start":8,"column_end":16},"name":"read_u24","qualname":"::ByteOrder::read_u24","value":"fn (buf: &[u8]) -> u32","parent":{"krate":0,"index":144},"children":[],"decl_id":null,"docs":" Reads an unsigned 24 bit integer from `buf`, stored in u32.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":150},"span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6763,"byte_end":6771,"line_start":258,"line_end":258,"column_start":8,"column_end":16},"name":"read_u32","qualname":"::ByteOrder::read_u32","value":"fn (buf: &[u8]) -> u32","parent":{"krate":0,"index":144},"children":[],"decl_id":null,"docs":" Reads an unsigned 32 bit integer from `buf`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":152},"span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":7296,"byte_end":7304,"line_start":277,"line_end":277,"column_start":8,"column_end":16},"name":"read_u48","qualname":"::ByteOrder::read_u48","value":"fn (buf: &[u8]) -> u64","parent":{"krate":0,"index":144},"children":[],"decl_id":null,"docs":" Reads an unsigned 48 bit integer from `buf`, stored in u64.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":154},"span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":7837,"byte_end":7845,"line_start":298,"line_end":298,"column_start":8,"column_end":16},"name":"read_u64","qualname":"::ByteOrder::read_u64","value":"fn (buf: &[u8]) -> u64","parent":{"krate":0,"index":144},"children":[],"decl_id":null,"docs":" Reads an unsigned 64 bit integer from `buf`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":156},"span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":8920,"byte_end":8929,"line_start":338,"line_end":338,"column_start":8,"column_end":17},"name":"read_uint","qualname":"::ByteOrder::read_uint","value":"fn (buf: &[u8], nbytes: usize) -> u64","parent":{"krate":0,"index":144},"children":[],"decl_id":null,"docs":" Reads an unsigned n-bytes integer from `buf`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":158},"span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":10041,"byte_end":10050,"line_start":378,"line_end":378,"column_start":8,"column_end":17},"name":"write_u16","qualname":"::ByteOrder::write_u16","value":"fn (buf: &mut [u8], n: u16) -> ()","parent":{"krate":0,"index":144},"children":[],"decl_id":null,"docs":" Writes an unsigned 16 bit integer `n` to `buf`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":160},"span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":10567,"byte_end":10576,"line_start":397,"line_end":397,"column_start":8,"column_end":17},"name":"write_u24","qualname":"::ByteOrder::write_u24","value":"fn (buf: &mut [u8], n: u32) -> ()","parent":{"krate":0,"index":144},"children":[],"decl_id":null,"docs":" Writes an unsigned 24 bit integer `n` to `buf`, stored in u32.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":162},"span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":11121,"byte_end":11130,"line_start":418,"line_end":418,"column_start":8,"column_end":17},"name":"write_u32","qualname":"::ByteOrder::write_u32","value":"fn (buf: &mut [u8], n: u32) -> ()","parent":{"krate":0,"index":144},"children":[],"decl_id":null,"docs":" Writes an unsigned 32 bit integer `n` to `buf`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":164},"span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":11663,"byte_end":11672,"line_start":437,"line_end":437,"column_start":8,"column_end":17},"name":"write_u48","qualname":"::ByteOrder::write_u48","value":"fn (buf: &mut [u8], n: u64) -> ()","parent":{"krate":0,"index":144},"children":[],"decl_id":null,"docs":" Writes an unsigned 48 bit integer `n` to `buf`, stored in u64.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":166},"span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":12217,"byte_end":12226,"line_start":458,"line_end":458,"column_start":8,"column_end":17},"name":"write_u64","qualname":"::ByteOrder::write_u64","value":"fn (buf: &mut [u8], n: u64) -> ()","parent":{"krate":0,"index":144},"children":[],"decl_id":null,"docs":" Writes an unsigned 64 bit integer `n` to `buf`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":168},"span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":13356,"byte_end":13366,"line_start":498,"line_end":498,"column_start":8,"column_end":18},"name":"write_uint","qualname":"::ByteOrder::write_uint","value":"fn (buf: &mut [u8], n: u64, nbytes: usize) -> ()","parent":{"krate":0,"index":144},"children":[],"decl_id":null,"docs":" Writes an unsigned integer `n` to `buf` using only `nbytes`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":170},"span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":14532,"byte_end":14540,"line_start":539,"line_end":539,"column_start":8,"column_end":16},"name":"read_i16","qualname":"::ByteOrder::read_i16","value":"fn (buf: &[u8]) -> i16","parent":{"krate":0,"index":144},"children":[],"decl_id":null,"docs":" Reads a signed 16 bit integer from `buf`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":14515,"byte_end":14524,"line_start":538,"line_end":538,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":172},"span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":15104,"byte_end":15112,"line_start":561,"line_end":561,"column_start":8,"column_end":16},"name":"read_i24","qualname":"::ByteOrder::read_i24","value":"fn (buf: &[u8]) -> i32","parent":{"krate":0,"index":144},"children":[],"decl_id":null,"docs":" Reads a signed 24 bit integer from `buf`, stored in i32.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":15087,"byte_end":15096,"line_start":560,"line_end":560,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":174},"span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":15657,"byte_end":15665,"line_start":583,"line_end":583,"column_start":8,"column_end":16},"name":"read_i32","qualname":"::ByteOrder::read_i32","value":"fn (buf: &[u8]) -> i32","parent":{"krate":0,"index":144},"children":[],"decl_id":null,"docs":" Reads a signed 32 bit integer from `buf`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":15640,"byte_end":15649,"line_start":582,"line_end":582,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":176},"span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":16245,"byte_end":16253,"line_start":605,"line_end":605,"column_start":8,"column_end":16},"name":"read_i48","qualname":"::ByteOrder::read_i48","value":"fn (buf: &[u8]) -> i64","parent":{"krate":0,"index":144},"children":[],"decl_id":null,"docs":" Reads a signed 48 bit integer from `buf`, stored in i64.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":16228,"byte_end":16237,"line_start":604,"line_end":604,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":178},"span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":16806,"byte_end":16814,"line_start":627,"line_end":627,"column_start":8,"column_end":16},"name":"read_i64","qualname":"::ByteOrder::read_i64","value":"fn (buf: &[u8]) -> i64","parent":{"krate":0,"index":144},"children":[],"decl_id":null,"docs":" Reads a signed 64 bit integer from `buf`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":16789,"byte_end":16798,"line_start":626,"line_end":626,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":180},"span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":18006,"byte_end":18014,"line_start":673,"line_end":673,"column_start":8,"column_end":16},"name":"read_int","qualname":"::ByteOrder::read_int","value":"fn (buf: &[u8], nbytes: usize) -> i64","parent":{"krate":0,"index":144},"children":[],"decl_id":null,"docs":" Reads a signed n-bytes integer from `buf`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":17989,"byte_end":17998,"line_start":672,"line_end":672,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":182},"span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":19312,"byte_end":19320,"line_start":720,"line_end":720,"column_start":8,"column_end":16},"name":"read_f32","qualname":"::ByteOrder::read_f32","value":"fn (buf: &[u8]) -> f32","parent":{"krate":0,"index":144},"children":[],"decl_id":null,"docs":" Reads a IEEE754 single-precision (4 bytes) floating point number.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":19295,"byte_end":19304,"line_start":719,"line_end":719,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":184},"span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":19940,"byte_end":19948,"line_start":743,"line_end":743,"column_start":8,"column_end":16},"name":"read_f64","qualname":"::ByteOrder::read_f64","value":"fn (buf: &[u8]) -> f64","parent":{"krate":0,"index":144},"children":[],"decl_id":null,"docs":" Reads a IEEE754 double-precision (8 bytes) floating point number.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":19923,"byte_end":19932,"line_start":742,"line_end":742,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":186},"span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":20521,"byte_end":20530,"line_start":765,"line_end":765,"column_start":8,"column_end":17},"name":"write_i16","qualname":"::ByteOrder::write_i16","value":"fn (buf: &mut [u8], n: i16) -> ()","parent":{"krate":0,"index":144},"children":[],"decl_id":null,"docs":" Writes a signed 16 bit integer `n` to `buf`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":20504,"byte_end":20513,"line_start":764,"line_end":764,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":188},"span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":21106,"byte_end":21115,"line_start":787,"line_end":787,"column_start":8,"column_end":17},"name":"write_i24","qualname":"::ByteOrder::write_i24","value":"fn (buf: &mut [u8], n: i32) -> ()","parent":{"krate":0,"index":144},"children":[],"decl_id":null,"docs":" Writes a signed 24 bit integer `n` to `buf`, stored in i32.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":21089,"byte_end":21098,"line_start":786,"line_end":786,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":190},"span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":21672,"byte_end":21681,"line_start":809,"line_end":809,"column_start":8,"column_end":17},"name":"write_i32","qualname":"::ByteOrder::write_i32","value":"fn (buf: &mut [u8], n: i32) -> ()","parent":{"krate":0,"index":144},"children":[],"decl_id":null,"docs":" Writes a signed 32 bit integer `n` to `buf`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":21655,"byte_end":21664,"line_start":808,"line_end":808,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":192},"span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":22273,"byte_end":22282,"line_start":831,"line_end":831,"column_start":8,"column_end":17},"name":"write_i48","qualname":"::ByteOrder::write_i48","value":"fn (buf: &mut [u8], n: i64) -> ()","parent":{"krate":0,"index":144},"children":[],"decl_id":null,"docs":" Writes a signed 48 bit integer `n` to `buf`, stored in i64.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":22256,"byte_end":22265,"line_start":830,"line_end":830,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":194},"span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":22847,"byte_end":22856,"line_start":853,"line_end":853,"column_start":8,"column_end":17},"name":"write_i64","qualname":"::ByteOrder::write_i64","value":"fn (buf: &mut [u8], n: i64) -> ()","parent":{"krate":0,"index":144},"children":[],"decl_id":null,"docs":" Writes a signed 64 bit integer `n` to `buf`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":22830,"byte_end":22839,"line_start":852,"line_end":852,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":196},"span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":24111,"byte_end":24120,"line_start":899,"line_end":899,"column_start":8,"column_end":17},"name":"write_int","qualname":"::ByteOrder::write_int","value":"fn (buf: &mut [u8], n: i64, nbytes: usize) -> ()","parent":{"krate":0,"index":144},"children":[],"decl_id":null,"docs":" Writes a signed integer `n` to `buf` using only `nbytes`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":24094,"byte_end":24103,"line_start":898,"line_end":898,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":198},"span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":25483,"byte_end":25492,"line_start":946,"line_end":946,"column_start":8,"column_end":17},"name":"write_f32","qualname":"::ByteOrder::write_f32","value":"fn (buf: &mut [u8], n: f32) -> ()","parent":{"krate":0,"index":144},"children":[],"decl_id":null,"docs":" Writes a IEEE754 single-precision (4 bytes) floating point number.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":25466,"byte_end":25475,"line_start":945,"line_end":945,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":200},"span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":26141,"byte_end":26150,"line_start":970,"line_end":970,"column_start":8,"column_end":17},"name":"write_f64","qualname":"::ByteOrder::write_f64","value":"fn (buf: &mut [u8], n: f64) -> ()","parent":{"krate":0,"index":144},"children":[],"decl_id":null,"docs":" Writes a IEEE754 double-precision (8 bytes) floating point number.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":26124,"byte_end":26133,"line_start":969,"line_end":969,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":202},"span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":26925,"byte_end":26938,"line_start":996,"line_end":996,"column_start":8,"column_end":21},"name":"read_u16_into","qualname":"::ByteOrder::read_u16_into","value":"fn (src: &[u8], dst: &mut [u16]) -> ()","parent":{"krate":0,"index":144},"children":[],"decl_id":null,"docs":" Reads unsigned 16 bit integers from `src` into `dst`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":204},"span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":27618,"byte_end":27631,"line_start":1019,"line_end":1019,"column_start":8,"column_end":21},"name":"read_u32_into","qualname":"::ByteOrder::read_u32_into","value":"fn (src: &[u8], dst: &mut [u32]) -> ()","parent":{"krate":0,"index":144},"children":[],"decl_id":null,"docs":" Reads unsigned 32 bit integers from `src` into `dst`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":206},"span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":28311,"byte_end":28324,"line_start":1042,"line_end":1042,"column_start":8,"column_end":21},"name":"read_u64_into","qualname":"::ByteOrder::read_u64_into","value":"fn (src: &[u8], dst: &mut [u64]) -> ()","parent":{"krate":0,"index":144},"children":[],"decl_id":null,"docs":" Reads unsigned 64 bit integers from `src` into `dst`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":208},"span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":29742,"byte_end":29755,"line_start":1090,"line_end":1090,"column_start":8,"column_end":21},"name":"read_i16_into","qualname":"::ByteOrder::read_i16_into","value":"fn (src: &[u8], dst: &mut [i16]) -> ()","parent":{"krate":0,"index":144},"children":[],"decl_id":null,"docs":" Reads signed 16 bit integers from `src` to `dst`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":29725,"byte_end":29734,"line_start":1089,"line_end":1089,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":210},"span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":30609,"byte_end":30622,"line_start":1119,"line_end":1119,"column_start":8,"column_end":21},"name":"read_i32_into","qualname":"::ByteOrder::read_i32_into","value":"fn (src: &[u8], dst: &mut [i32]) -> ()","parent":{"krate":0,"index":144},"children":[],"decl_id":null,"docs":" Reads signed 32 bit integers from `src` into `dst`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":30592,"byte_end":30601,"line_start":1118,"line_end":1118,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":212},"span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":31477,"byte_end":31490,"line_start":1148,"line_end":1148,"column_start":8,"column_end":21},"name":"read_i64_into","qualname":"::ByteOrder::read_i64_into","value":"fn (src: &[u8], dst: &mut [i64]) -> ()","parent":{"krate":0,"index":144},"children":[],"decl_id":null,"docs":" Reads signed 64 bit integers from `src` into `dst`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":31460,"byte_end":31469,"line_start":1147,"line_end":1147,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":214},"span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":33317,"byte_end":33340,"line_start":1208,"line_end":1208,"column_start":8,"column_end":31},"name":"read_f32_into_unchecked","qualname":"::ByteOrder::read_f32_into_unchecked","value":"fn (src: &[u8], dst: &mut [f32]) -> ()","parent":{"krate":0,"index":144},"children":[],"decl_id":null,"docs":" Reads IEEE754 single-precision (4 bytes) floating point numbers from\n `src` into `dst`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":33300,"byte_end":33309,"line_start":1207,"line_end":1207,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":216},"span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":34261,"byte_end":34284,"line_start":1238,"line_end":1238,"column_start":8,"column_end":31},"name":"read_f64_into_unchecked","qualname":"::ByteOrder::read_f64_into_unchecked","value":"fn (src: &[u8], dst: &mut [f64]) -> ()","parent":{"krate":0,"index":144},"children":[],"decl_id":null,"docs":" Reads IEEE754 single-precision (4 bytes) floating point numbers from\n `src` into `dst`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":34244,"byte_end":34253,"line_start":1237,"line_end":1237,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":218},"span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":35127,"byte_end":35141,"line_start":1266,"line_end":1266,"column_start":8,"column_end":22},"name":"write_u16_into","qualname":"::ByteOrder::write_u16_into","value":"fn (src: &[u16], dst: &mut [u8]) -> ()","parent":{"krate":0,"index":144},"children":[],"decl_id":null,"docs":" Writes unsigned 16 bit integers from `src` into `dst`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":220},"span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":35822,"byte_end":35836,"line_start":1289,"line_end":1289,"column_start":8,"column_end":22},"name":"write_u32_into","qualname":"::ByteOrder::write_u32_into","value":"fn (src: &[u32], dst: &mut [u8]) -> ()","parent":{"krate":0,"index":144},"children":[],"decl_id":null,"docs":" Writes unsigned 32 bit integers from `src` into `dst`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":222},"span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":36517,"byte_end":36531,"line_start":1312,"line_end":1312,"column_start":8,"column_end":22},"name":"write_u64_into","qualname":"::ByteOrder::write_u64_into","value":"fn (src: &[u64], dst: &mut [u8]) -> ()","parent":{"krate":0,"index":144},"children":[],"decl_id":null,"docs":" Writes unsigned 64 bit integers from `src` into `dst`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":224},"span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":37940,"byte_end":37954,"line_start":1359,"line_end":1359,"column_start":8,"column_end":22},"name":"write_i16_into","qualname":"::ByteOrder::write_i16_into","value":"fn (src: &[i16], dst: &mut [u8]) -> ()","parent":{"krate":0,"index":144},"children":[],"decl_id":null,"docs":" Writes signed 16 bit integers from `src` into `dst`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":226},"span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":38791,"byte_end":38805,"line_start":1387,"line_end":1387,"column_start":8,"column_end":22},"name":"write_i32_into","qualname":"::ByteOrder::write_i32_into","value":"fn (src: &[i32], dst: &mut [u8]) -> ()","parent":{"krate":0,"index":144},"children":[],"decl_id":null,"docs":" Writes signed 32 bit integers from `src` into `dst`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":228},"span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":39642,"byte_end":39656,"line_start":1415,"line_end":1415,"column_start":8,"column_end":22},"name":"write_i64_into","qualname":"::ByteOrder::write_i64_into","value":"fn (src: &[i64], dst: &mut [u8]) -> ()","parent":{"krate":0,"index":144},"children":[],"decl_id":null,"docs":" Writes signed 64 bit integers from `src` into `dst`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":230},"span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":41479,"byte_end":41493,"line_start":1475,"line_end":1475,"column_start":8,"column_end":22},"name":"write_f32_into","qualname":"::ByteOrder::write_f32_into","value":"fn (src: &[f32], dst: &mut [u8]) -> ()","parent":{"krate":0,"index":144},"children":[],"decl_id":null,"docs":" Writes IEEE754 single-precision (4 bytes) floating point numbers from\n `src` into `dst`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":232},"span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":42427,"byte_end":42441,"line_start":1506,"line_end":1506,"column_start":8,"column_end":22},"name":"write_f64_into","qualname":"::ByteOrder::write_f64_into","value":"fn (src: &[f64], dst: &mut [u8]) -> ()","parent":{"krate":0,"index":144},"children":[],"decl_id":null,"docs":" Writes IEEE754 double-precision (8 bytes) floating point numbers from\n `src` into `dst`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":234},"span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":43182,"byte_end":43196,"line_start":1530,"line_end":1530,"column_start":8,"column_end":22},"name":"from_slice_u16","qualname":"::ByteOrder::from_slice_u16","value":"fn (numbers: &mut [u16]) -> ()","parent":{"krate":0,"index":144},"children":[],"decl_id":null,"docs":" Converts the given slice of unsigned 16 bit integers to a particular\n endianness.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":236},"span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":43771,"byte_end":43785,"line_start":1549,"line_end":1549,"column_start":8,"column_end":22},"name":"from_slice_u32","qualname":"::ByteOrder::from_slice_u32","value":"fn (numbers: &mut [u32]) -> ()","parent":{"krate":0,"index":144},"children":[],"decl_id":null,"docs":" Converts the given slice of unsigned 32 bit integers to a particular\n endianness.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":238},"span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":44360,"byte_end":44374,"line_start":1568,"line_end":1568,"column_start":8,"column_end":22},"name":"from_slice_u64","qualname":"::ByteOrder::from_slice_u64","value":"fn (numbers: &mut [u64]) -> ()","parent":{"krate":0,"index":144},"children":[],"decl_id":null,"docs":" Converts the given slice of unsigned 64 bit integers to a particular\n endianness.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":240},"span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":45585,"byte_end":45599,"line_start":1608,"line_end":1608,"column_start":8,"column_end":22},"name":"from_slice_i16","qualname":"::ByteOrder::from_slice_i16","value":"fn (src: &mut [i16]) -> ()","parent":{"krate":0,"index":144},"children":[],"decl_id":null,"docs":" Converts the given slice of signed 16 bit integers to a particular\n endianness.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":45568,"byte_end":45577,"line_start":1607,"line_end":1607,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":242},"span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":46337,"byte_end":46351,"line_start":1633,"line_end":1633,"column_start":8,"column_end":22},"name":"from_slice_i32","qualname":"::ByteOrder::from_slice_i32","value":"fn (src: &mut [i32]) -> ()","parent":{"krate":0,"index":144},"children":[],"decl_id":null,"docs":" Converts the given slice of signed 32 bit integers to a particular\n endianness.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":46320,"byte_end":46329,"line_start":1632,"line_end":1632,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":244},"span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":47089,"byte_end":47103,"line_start":1658,"line_end":1658,"column_start":8,"column_end":22},"name":"from_slice_i64","qualname":"::ByteOrder::from_slice_i64","value":"fn (src: &mut [i64]) -> ()","parent":{"krate":0,"index":144},"children":[],"decl_id":null,"docs":" Converts the given slice of signed 64 bit integers to a particular\n endianness.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":47072,"byte_end":47081,"line_start":1657,"line_end":1657,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":246},"span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":48313,"byte_end":48327,"line_start":1696,"line_end":1696,"column_start":8,"column_end":22},"name":"from_slice_f32","qualname":"::ByteOrder::from_slice_f32","value":"fn (numbers: &mut [f32]) -> ()","parent":{"krate":0,"index":144},"children":[],"decl_id":null,"docs":" Converts the given slice of IEEE754 single-precision (4 bytes) floating\n point numbers to a particular endianness.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":248},"span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":48597,"byte_end":48611,"line_start":1703,"line_end":1703,"column_start":8,"column_end":22},"name":"from_slice_f64","qualname":"::ByteOrder::from_slice_f64","value":"fn (numbers: &mut [f64]) -> ()","parent":{"krate":0,"index":144},"children":[],"decl_id":null,"docs":" Converts the given slice of IEEE754 double-precision (8 bytes) floating\n point numbers to a particular endianness.","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":356},"span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":49122,"byte_end":49131,"line_start":1723,"line_end":1723,"column_start":10,"column_end":19},"name":"BigEndian","qualname":"::BigEndian","value":"BigEndian::{}","parent":null,"children":[],"decl_id":null,"docs":" Defines big-endian serialization.","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":49113,"byte_end":49134,"line_start":1723,"line_end":1723,"column_start":1,"column_end":22}},{"value":"rustc_copy_clone_marker","span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":49113,"byte_end":49134,"line_start":1723,"line_end":1723,"column_start":1,"column_end":22}}]},{"kind":"Type","id":{"krate":0,"index":254},"span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":49330,"byte_end":49332,"line_start":1734,"line_end":1734,"column_start":10,"column_end":12},"name":"BE","qualname":"::BE","value":"BigEndian","parent":null,"children":[],"decl_id":null,"docs":" A type alias for [`BigEndian`].","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":388},"span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":49847,"byte_end":49859,"line_start":1753,"line_end":1753,"column_start":10,"column_end":22},"name":"LittleEndian","qualname":"::LittleEndian","value":"LittleEndian::{}","parent":null,"children":[],"decl_id":null,"docs":" Defines little-endian serialization.","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":49838,"byte_end":49862,"line_start":1753,"line_end":1753,"column_start":1,"column_end":25}},{"value":"rustc_copy_clone_marker","span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":49838,"byte_end":49862,"line_start":1753,"line_end":1753,"column_start":1,"column_end":25}}]},{"kind":"Type","id":{"krate":0,"index":260},"span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":50076,"byte_end":50078,"line_start":1764,"line_end":1764,"column_start":10,"column_end":12},"name":"LE","qualname":"::LE","value":"LittleEndian","parent":null,"children":[],"decl_id":null,"docs":" A type alias for [`LittleEndian`].","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":262},"span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":50805,"byte_end":50818,"line_start":1790,"line_end":1790,"column_start":10,"column_end":23},"name":"NetworkEndian","qualname":"::NetworkEndian","value":"BigEndian","parent":null,"children":[],"decl_id":null,"docs":" Defines network byte order serialization.","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":264},"span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":51132,"byte_end":51144,"line_start":1801,"line_end":1801,"column_start":10,"column_end":22},"name":"NativeEndian","qualname":"::NativeEndian","value":"LittleEndian","parent":null,"children":[],"decl_id":null,"docs":" Defines system native-endian serialization.","sig":null,"attributes":[{"value":"cfg(target_endian = \"little\")","span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":51090,"byte_end":51122,"line_start":1800,"line_end":1800,"column_start":1,"column_end":33}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,55,47,115,114,99,47,105,111,46,114,115],"byte_start":133923,"byte_end":133924,"line_start":1024,"line_end":1024,"column_start":45,"column_end":46},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,55,47,115,114,99,47,105,111,46,114,115],"byte_start":150681,"byte_end":150682,"line_start":1558,"line_end":1558,"column_start":47,"column_end":48},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4243,"byte_end":4255,"line_start":170,"line_end":170,"column_start":28,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4286,"byte_end":4295,"line_start":171,"line_end":171,"column_start":28,"column_end":37},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":49153,"byte_end":49162,"line_start":1725,"line_end":1725,"column_start":18,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":252}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":49881,"byte_end":49893,"line_start":1755,"line_end":1755,"column_start":18,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":258}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":53385,"byte_end":53394,"line_start":1881,"line_end":1881,"column_start":20,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":278},{"krate":0,"index":280},{"krate":0,"index":282},{"krate":0,"index":284},{"krate":0,"index":286},{"krate":0,"index":288},{"krate":0,"index":290},{"krate":0,"index":292},{"krate":0,"index":294},{"krate":0,"index":296},{"krate":0,"index":298},{"krate":0,"index":300},{"krate":0,"index":302},{"krate":0,"index":304},{"krate":0,"index":306},{"krate":0,"index":308},{"krate":0,"index":310},{"krate":0,"index":312},{"krate":0,"index":314}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":59114,"byte_end":59126,"line_start":2096,"line_end":2096,"column_start":20,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":318},{"krate":0,"index":320},{"krate":0,"index":322},{"krate":0,"index":324},{"krate":0,"index":326},{"krate":0,"index":328},{"krate":0,"index":330},{"krate":0,"index":332},{"krate":0,"index":334},{"krate":0,"index":336},{"krate":0,"index":338},{"krate":0,"index":340},{"krate":0,"index":342},{"krate":0,"index":344},{"krate":0,"index":346},{"krate":0,"index":348},{"krate":0,"index":350},{"krate":0,"index":352},{"krate":0,"index":354}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,55,47,115,114,99,47,105,111,46,114,115],"byte_start":102271,"byte_end":102275,"line_start":28,"line_end":28,"column_start":29,"column_end":33},"kind":"SuperTrait","from":{"krate":1,"index":4336},"to":{"krate":0,"index":34}},{"span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,55,47,115,114,99,47,105,111,46,114,115],"byte_start":133923,"byte_end":133924,"line_start":1024,"line_end":1024,"column_start":45,"column_end":46},"kind":{"variant":"Impl","fields":[0]},"from":{"krate":0,"index":99},"to":{"krate":0,"index":34}},{"span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,55,47,115,114,99,47,105,111,46,114,115],"byte_start":134734,"byte_end":134739,"line_start":1048,"line_end":1048,"column_start":30,"column_end":35},"kind":"SuperTrait","from":{"krate":1,"index":4366},"to":{"krate":0,"index":90}},{"span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,55,47,115,114,99,47,105,111,46,114,115],"byte_start":150681,"byte_end":150682,"line_start":1558,"line_end":1558,"column_start":47,"column_end":48},"kind":{"variant":"Impl","fields":[1]},"from":{"krate":0,"index":157},"to":{"krate":0,"index":90}},{"span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4243,"byte_end":4255,"line_start":170,"line_end":170,"column_start":28,"column_end":40},"kind":{"variant":"Impl","fields":[2]},"from":{"krate":0,"index":388},"to":{"krate":0,"index":138}},{"span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4286,"byte_end":4295,"line_start":171,"line_end":171,"column_start":28,"column_end":37},"kind":{"variant":"Impl","fields":[3]},"from":{"krate":0,"index":356},"to":{"krate":0,"index":138}},{"span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5477,"byte_end":5482,"line_start":210,"line_end":210,"column_start":7,"column_end":12},"kind":"SuperTrait","from":{"krate":2,"index":2550},"to":{"krate":0,"index":144}},{"span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5485,"byte_end":5489,"line_start":210,"line_end":210,"column_start":15,"column_end":19},"kind":"SuperTrait","from":{"krate":2,"index":1682},"to":{"krate":0,"index":144}},{"span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5492,"byte_end":5497,"line_start":210,"line_end":210,"column_start":22,"column_end":27},"kind":"SuperTrait","from":{"krate":2,"index":8064},"to":{"krate":0,"index":144}},{"span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5500,"byte_end":5507,"line_start":210,"line_end":210,"column_start":30,"column_end":37},"kind":"SuperTrait","from":{"krate":2,"index":2584},"to":{"krate":0,"index":144}},{"span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5510,"byte_end":5512,"line_start":210,"line_end":210,"column_start":40,"column_end":42},"kind":"SuperTrait","from":{"krate":2,"index":2368},"to":{"krate":0,"index":144}},{"span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5515,"byte_end":5519,"line_start":210,"line_end":210,"column_start":45,"column_end":49},"kind":"SuperTrait","from":{"krate":2,"index":7630},"to":{"krate":0,"index":144}},{"span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5522,"byte_end":5525,"line_start":210,"line_end":210,"column_start":52,"column_end":55},"kind":"SuperTrait","from":{"krate":2,"index":2398},"to":{"krate":0,"index":144}},{"span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5528,"byte_end":5537,"line_start":210,"line_end":210,"column_start":58,"column_end":67},"kind":"SuperTrait","from":{"krate":2,"index":2362},"to":{"krate":0,"index":144}},{"span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5540,"byte_end":5550,"line_start":210,"line_end":210,"column_start":70,"column_end":80},"kind":"SuperTrait","from":{"krate":2,"index":2416},"to":{"krate":0,"index":144}},{"span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5566,"byte_end":5572,"line_start":211,"line_end":211,"column_start":16,"column_end":22},"kind":"SuperTrait","from":{"krate":0,"index":138},"to":{"krate":0,"index":144}},{"span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":49153,"byte_end":49162,"line_start":1725,"line_end":1725,"column_start":18,"column_end":27},"kind":{"variant":"Impl","fields":[4]},"from":{"krate":0,"index":356},"to":{"krate":2,"index":2584}},{"span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":49881,"byte_end":49893,"line_start":1755,"line_end":1755,"column_start":18,"column_end":30},"kind":{"variant":"Impl","fields":[5]},"from":{"krate":0,"index":388},"to":{"krate":2,"index":2584}},{"span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":53385,"byte_end":53394,"line_start":1881,"line_end":1881,"column_start":20,"column_end":29},"kind":{"variant":"Impl","fields":[6]},"from":{"krate":0,"index":356},"to":{"krate":0,"index":144}},{"span":{"file_name":[47,85,115,101,114,115,47,97,112,112,108,101,115,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,55,47,115,114,99,47,108,105,98,46,114,115],"byte_start":59114,"byte_end":59126,"line_start":2096,"line_end":2096,"column_start":20,"column_end":32},"kind":{"variant":"Impl","fields":[7]},"from":{"krate":0,"index":388},"to":{"krate":0,"index":144}}]}